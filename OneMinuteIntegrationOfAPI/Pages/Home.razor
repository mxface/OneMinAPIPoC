@page "/"
@using System.IO;
@using System.Text;
@using System.Net.Http.Headers;
@using System.Text.Json;
@using OneMinuteIntegrationOfAPI.Interfaces
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject IConfiguration Configuration
@inject IServiceUsageHistoryService UsageService

<PageTitle>Home</PageTitle>

<div class="container-fluid mt-5">
    <div class="row">
        <!-- Sidebar Navigation -->
        <div class="col-md-12">
            <div class="step-sidebar">

                <div class="step-nav-item step-nav">
                    <div class="step-nav-item @(step == 1 ? "active" : "")">
                        <span class="step-number">1</span>
                        <div class="step-content">
                            <div class="mb-4">
                                <h4 class="mb-1">Choose a platform</h4>
                                <p class="text-muted">To start, pick a preferred platform. Either can be used later.</p>
                            </div>

                            <div class="row">
                                <div class="col-md-2 col-6 platform-box me-3">
                                    <div class="f_setting @(selectedPlatform == "Web" ? "selected" : "")" @onclick="@(() => SelectPlatform("Web"))">
                                        <i class="bi bi-laptop fs-1 mb-2"></i>
                                        <div class="platform-label">Web</div>
                                    </div>
                                </div>
                                <div class="col-md-2 col-6 platform-box me-3">
                                    <div class="f_setting @(selectedPlatform == "Mobile" ? "selected" : "")" @onclick="@(() => SelectPlatform("Mobile"))">
                                        <i class="bi bi-phone fs-1 mb-2"></i>
                                        <div class="platform-label">Mobile</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="step-nav-item @(step == 2 ? "active" : "")">
                    <span class="step-number">2</span>
                    <div class="step-content">
                        <div class="mb-4">
                            <h4 class="mb-1">Choose your framework</h4>
                            <p class="text-muted">You can always install on another platform later.</p>
                        </div>

                        <div class="row">
                            @foreach (var item in frameworks)
                            {
                                <div class="col-md-2 col-6 framework-box me-3">
                                    <div class="f_setting @(selectedFramework == item.Name ? "selected" : "")" @onclick="@(() => SelectFramework(item.Name))">
                                        <div class="framework-icon">@item.Icon</div>
                                        <div class="framework-label">@item.Name</div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="step-nav-item @(step == 3 ? "active" : "")">
                    <span class="step-number">3</span>
                    <div class="step-content">
                        <div class="mb-4">
                            <h4 class="mb-3 d-inline-block">Integrate Face Detection API</h4>
                            @* <a class="btn btn-outline-secondary btn-sm float-end" href="#">
                                <i class="bi bi-box-arrow-up-right"></i> Open docs
                            </a> *@

                            <p class="mt-2 mb-3">
                                Use below @selectedLanguage code in your application to implement Face Detection API
                            </p>

                            <div class="code-container">
                                <div class="code-actions">
                                    <button @onclick="CopyToClipboard"
                                            class="action-button"
                                            title="Copy to clipboard"
                                            disabled="@(isCopying)">
                                        <i class="bi @(isCopied ? "bi-check2" : "bi-clipboard") me-1"></i>
                                    </button>


                                    <button @onclick="DownloadCurrentCode"
                                            class="action-button @(isDownloaded ? "downloaded" : "")"
                                            title="Download file">
                                        <i class="bi @(isDownloaded ? "bi-check2" : "bi-download") me-1"></i>
                                    </button>
                                </div>

                                <pre class="code-snippet bg-light line-numbers">
                                <code class="@LanguageCssClass" @ref="codeEl" @key="renderKey">@currentCode</code>
                                </pre>
                            </div>


                            <div class="mt-3">
                                <p class="text-sm">
                                    <i class="bi bi-info-circle"></i>
                                    Replace <code>YOUR_SUBSCRIPTION_KEY</code> with your actual MXFace.ai subscription key.
                                </p>
                                <p class="text-sm">
                                    Need help? Check out our <a href="#" class="text-link-orange">detailed documentation</a>.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="step-nav-item">
                    <span class="step-number">4</span>
                    <div class="step-content">
                        <div class="mb-4">
                            <h4 class="mb-1">Send request</h4>
                            <p class="text-muted">Open the page where you installed Fingerprint and wait a second, the script automatically runs on page load.</p>
                        </div>
                    </div>
                </div>

                <!-- Step 5: Verify installation -->
                <div class="step-nav-item">
                    <span class="step-number">5</span>
                    <div class="step-content">
                        <h4>Complete & Launch</h4>
                        <p>Your app is ready to go!</p>
                        <div class="mb-4">
                            <h4 class="mb-1">Verify installation</h4>
                            <p class="text-muted">Let's make sure the script is working as expected.</p>

                            <div class="d-flex flex-column gap-3">
                                <div>
                                    <button class="btn btn_orange d-inline-flex align-items-center gap-2"
                                            @onclick="CheckInstallation"
                                            disabled="@isCheckingInstallation">
                                        @if (isCheckingInstallation)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span>Checking…</span>
                                        }
                                        else
                                        {
                                            <span>Check installation</span>
                                        }
                                    </button>
                                </div>

                                @if (checkPerformed && installationCheckResult is not null)
                                {
                                    <div class="d-flex flex-column gap-2">
                                        @if (installationCheckResult.RemainingUsage < installationCheckResult.TotalUsage)
                                        {
                                            <span class="badge badge-success-check d-inline-flex align-items-center" style="color: green">
                                                <i class="bi bi-check2 me-1"></i>
                                                Tested — keep using @installationCheckResult.PackageName
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge badge-warn-msg d-inline-flex align-items-center" style="color: darkorange">
                                                <i class="bi bi-info-circle me-1"></i>
                                                Please start using this API in your application
                                            </span>
                                        }
                                        <div class="mt-2">
                                            <p class="text-sm text-muted mb-0">
                                                <strong>@installationCheckResult.PackageName</strong> — Remaining calls:
                                                <strong>@installationCheckResult.RemainingUsage</strong> / Total: <strong>@installationCheckResult.TotalUsage</strong>
                                            </p>
                                        </div>
                                    </div>
                                }

                                @if (!string.IsNullOrWhiteSpace(errorMessage))
                                {
                                    <span class="text-danger d-inline-flex align-items-center">
                                        <i class="bi bi-x-circle-fill me-2"></i> @errorMessage
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <!-- /Step 5 -->
            </div>
        </div>
    </div>

    <div class="col-md-10">
        <!-- (Your other steps content kept as-is) -->
        <div class="mb-4"></div>
    </div>
</div>

@code {
    string selectedLanguage = "JavaScript";
    bool isCopied;
    bool isCopying;
    string currentCode = "// Loading...";
    int step = 1;
    string selectedPlatform = "Web";
    string selectedFramework = "JavaScript";
    string? jsCode, pyCode, csCode;
    ElementReference codeEl;
    bool needsHighlight;
    int renderKey = 0;
    private bool checkPerformed = false;
    bool isCheckingInstallation = false;
    InstallationCheckResult? installationCheckResult;
    string errorMessage = "";
    bool isDownloaded;

    string? apiBase;
    string? bearerToken;
    string facePackageName = "Face API Free";
    int initialQuota = 100;

    record FrameworkOption(string Name, MarkupString Icon);

    FrameworkOption[] frameworks = new[]
    {
        new FrameworkOption("JavaScript", new MarkupString("<img src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg' class='fw-img' alt='JavaScript' />")),
        new FrameworkOption("Python", new MarkupString("<img src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/python/python-original.svg' class='fw-img' alt='Python' />")),
        new FrameworkOption("C#", new MarkupString("<img src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/csharp/csharp-original.svg' class='fw-img' alt='C#' />"))
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load initial usage data silently without showing any message
            var usage = await UsageService.GetClientUsage();
            installationCheckResult = new InstallationCheckResult
            {
                IsSuccessful = usage.remainingUsage < usage.totalUsage,
                PackageName = usage.packageName ?? "Face API Free",
                RemainingUsage = usage.remainingUsage,
                TotalUsage = usage.totalUsage
            };
            // Don't set any error message here
            errorMessage = ""; // Clear any existing error message
            checkPerformed = false;
        }
        catch (Exception ex)
        {
            // Just log the error, don't show to user
            Console.Error.WriteLine($"Error loading initial usage data: {ex.Message}");
        }

        // Load code samples
        jsCode = await SafeGet("code/FingerprintDetectionJavascript/app.js", "// JavaScript code file not found");
        pyCode = await SafeGet("code/FingerprintDetectionPython/main.py", "# Python code file not found");
        csCode = await SafeGet("code/FingerprintDetectionCSharp/Program.cs", "// C# code file not found");

        selectedLanguage = "JavaScript";
        SetCurrentCode();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (needsHighlight)
        {
            needsHighlight = false;
            try { await JSRuntime.InvokeVoidAsync("prismHelper.highlightElement", codeEl); } catch { }
        }
    }

    void SetCurrentCode()
    {
        currentCode = selectedLanguage switch
        {
            "Python" => pyCode ?? "# Python code file not found",
            "C#" => csCode ?? "// C# code file not found",
            _ => jsCode ?? "// JavaScript code file not found"
        };
        renderKey++;
        needsHighlight = true;
        StateHasChanged();
    }

    async Task<string> SafeGet(string url, string fallback)
    {
        try { return await Http.GetStringAsync(url); }
        catch { return fallback; }
    }

    async Task CopyToClipboard()
    {
        if (isCopying) return;
        isCopying = true;
        try
        {
            var success = await JSRuntime.InvokeAsync<bool>("copyHelper.copyText", currentCode);
            if (success)
            {
                isCopied = true;
                StateHasChanged();
                await Task.Delay(2000);
                isCopied = false;
            }
        }
        catch (Exception ex) { Console.Error.WriteLine($"Failed to copy to clipboard: {ex.Message}"); }
        finally { isCopying = false; StateHasChanged(); }
    }

    void SelectPlatform(string platform) => selectedPlatform = platform;

    void SelectFramework(string framework)
    {
        selectedFramework = framework;
        selectedLanguage = framework switch { "Python" => "Python", "C#" => "C#", _ => "JavaScript" };
        SetCurrentCode();
    }
    async Task CheckInstallation()
    {
        isCheckingInstallation = true;
        errorMessage = ""; // Clear any previous message
        checkPerformed = false;
        StateHasChanged();

        try
        {
            var usage = await UsageService.GetClientUsage();
            installationCheckResult = new InstallationCheckResult
            {
                IsSuccessful = usage.remainingUsage < usage.totalUsage,
                PackageName = usage.packageName ?? "Face API Free",
                RemainingUsage = usage.remainingUsage,
                TotalUsage = usage.totalUsage
            };

            // Show message only when Check Installation is clicked
            // if (installationCheckResult.RemainingUsage < installationCheckResult.TotalUsage)
            // {
            //     errorMessage = $"Successfully connected! You are using {installationCheckResult.PackageName} package.";
            // }
            // else
            // {
            //     errorMessage = "Please start using this API in your application.";
            // }
            checkPerformed = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error checking installation: {ex.Message}";
            Console.Error.WriteLine(ex);
        }
        finally
        {
            isCheckingInstallation = false;
            StateHasChanged();
        }
    }

    public class InstallationCheckResult
    {
        public bool IsSuccessful { get; set; }
        public string PackageName { get; set; } = "";
        public int RemainingUsage { get; set; }
        public int TotalUsage { get; set; }
    }

    string DownloadFileName => selectedLanguage switch
    {
        "Python" => "main.py",
        "C#" => "Program.cs",
        _ => "app.js"
    };

    string CurrentFileUrl => selectedLanguage switch
    {
        "Python" => "code/FingerprintDetectionPython/main.py",
        "C#" => "code/FingerprintDetectionCSharp/Program.cs",
        _ => "code/FingerprintDetectionJavascript/app.js"
    };

    string LanguageCssClass => selectedLanguage switch
    {
        "Python" => "language-python",
        "C#" => "language-csharp",
        _ => "language-javascript"
    };

    async Task DownloadCurrentCode()
    {
        try
        {
            var ok = await JSRuntime.InvokeAsync<bool>(
                "downloadHelper.fromUrl",
                CurrentFileUrl,
                DownloadFileName
            );

            isDownloaded = ok;
            StateHasChanged();
            await Task.Delay(1800);
        }
        finally
        {
            isDownloaded = false;
            StateHasChanged();
        }
    }


    string CurrentMimeType => selectedLanguage switch
    {
        "Python" => "text/x-python",
        "C#" => "text/plain",           
        _ => "application/javascript"
    };
}
